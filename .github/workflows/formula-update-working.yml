name: Formula Update (Working Version)

on:
  repository_dispatch:
    types: [release-published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to process (e.g., v1.2.3)'
        required: true
        type: string
      source_repository:
        description: 'Source repository (e.g., beriberikix/usbipd-mac)'
        required: false
        default: 'beriberikix/usbipd-mac'
        type: string
      force_update:
        description: 'Force update even if formula already exists for this version'
        required: false
        default: false
        type: boolean

jobs:
  update-formula:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    steps:
      - name: üîç Extract Release Information
        id: extract-info
        run: |
          echo "::group::Extract Release Information"
          
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            VERSION="${{ github.event.client_payload.release.tag_name }}"
            SOURCE_REPO="${{ github.event.client_payload.repository }}"
            TRIGGER_TYPE="webhook"
            echo "üì° Webhook-triggered update"
          else
            VERSION="${{ inputs.version }}"
            SOURCE_REPO="${{ inputs.source_repository }}"
            TRIGGER_TYPE="manual"
            echo "üîß Manual workflow dispatch"
          fi
          
          echo "üì¶ Source Repository: $SOURCE_REPO"
          echo "üè∑Ô∏è Release Version: $VERSION"
          echo "üîß Trigger Type: $TRIGGER_TYPE"
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error title=Invalid Version::Version must follow semantic versioning (vX.Y.Z)"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "source-repo=$SOURCE_REPO" >> $GITHUB_OUTPUT
          echo "trigger-type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: üì• Checkout Tap Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üîß Setup Environment
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Formula Update)"

      - name: üì• Download Release Metadata
        id: download-metadata
        run: |
          echo "::group::Download Metadata"
          
          VERSION="${{ steps.extract-info.outputs.version }}"
          SOURCE_REPO="${{ steps.extract-info.outputs.source-repo }}"
          METADATA_URL="https://github.com/$SOURCE_REPO/releases/download/$VERSION/homebrew-metadata.json"
          
          echo "üì• Downloading metadata from: $METADATA_URL"
          
          if curl -L -f -s "$METADATA_URL" -o homebrew-metadata.json; then
            echo "‚úÖ Metadata downloaded successfully"
            
            # Validate JSON
            if jq empty homebrew-metadata.json >/dev/null 2>&1; then
              echo "‚úÖ Metadata is valid JSON"
            else
              echo "::error title=Invalid JSON::Downloaded metadata is not valid JSON"
              exit 1
            fi
          else
            echo "::error title=Download Failed::Could not download metadata from $METADATA_URL"
            exit 1
          fi
          
          echo "::endgroup::"

      - name: üç∫ Update Formula
        run: |
          echo "::group::Update Formula"
          
          VERSION="${{ steps.extract-info.outputs.version }}"
          
          # Extract values from metadata
          ARCHIVE_URL=$(jq -r '.metadata.archive_url' homebrew-metadata.json)
          SHA256_CHECKSUM=$(jq -r '.metadata.sha256' homebrew-metadata.json)
          
          echo "üç∫ Updating formula..."
          echo "   Version: $VERSION"
          echo "   Archive URL: $ARCHIVE_URL"
          echo "   SHA256: $SHA256_CHECKSUM"
          
          FORMULA_FILE="Formula/usbipd-mac.rb"
          if [ ! -f "$FORMULA_FILE" ]; then
            echo "::error title=Formula Missing::Formula file not found: $FORMULA_FILE"
            exit 1
          fi
          
          # Create backup
          cp "$FORMULA_FILE" "$FORMULA_FILE.backup"
          
          # Update formula with actual values
          sed -i "s|archive/v[0-9][0-9.]*\\.tar\\.gz|archive/$VERSION.tar.gz|g" "$FORMULA_FILE"
          sed -i "s|version \"v[0-9][0-9.]*\"|version \"$VERSION\"|g" "$FORMULA_FILE"
          sed -i "s|sha256 \"[a-f0-9]\\{64\\}\"|sha256 \"$SHA256_CHECKSUM\"|g" "$FORMULA_FILE"
          
          echo "‚úÖ Formula updated successfully"
          echo "::endgroup::"

      - name: üîç Validate Formula
        run: |
          echo "::group::Validate Formula"
          
          FORMULA_FILE="Formula/usbipd-mac.rb"
          VERSION="${{ steps.extract-info.outputs.version }}"
          SHA256_CHECKSUM=$(jq -r '.metadata.sha256' homebrew-metadata.json)
          
          # Ruby syntax validation
          if ruby -c "$FORMULA_FILE" >/dev/null 2>&1; then
            echo "‚úÖ Ruby syntax is valid"
          else
            echo "::error title=Syntax Error::Formula has Ruby syntax errors"
            exit 1
          fi
          
          # Verify version is present
          if grep -q "version \"$VERSION\"" "$FORMULA_FILE"; then
            echo "‚úÖ Version $VERSION found in formula"
          else
            echo "::error title=Version Missing::Version $VERSION not found in formula"
            exit 1
          fi
          
          # Verify SHA256 is present  
          if grep -q "sha256 \"$SHA256_CHECKSUM\"" "$FORMULA_FILE"; then
            echo "‚úÖ SHA256 checksum found in formula"
          else
            echo "::error title=Checksum Missing::SHA256 checksum not found in formula"
            exit 1
          fi
          
          echo "‚úÖ Formula validation passed"
          echo "::endgroup::"

      - name: üìÑ Commit Formula Changes
        run: |
          echo "::group::Commit Changes"
          
          VERSION="${{ steps.extract-info.outputs.version }}"
          SOURCE_REPO="${{ steps.extract-info.outputs.source-repo }}"
          TRIGGER_TYPE="${{ steps.extract-info.outputs.trigger-type }}"
          
          if git diff --quiet Formula/usbipd-mac.rb; then
            echo "‚ö†Ô∏è No changes to commit"
          else
            echo "üìù Committing formula changes..."
            
            git add Formula/usbipd-mac.rb
            
            if [ "$TRIGGER_TYPE" = "webhook" ]; then
              COMMIT_MSG="feat: update formula to $VERSION - automated webhook update

Automated formula update triggered by release webhook from $SOURCE_REPO

üì¶ Version Update: $VERSION  
üîó Release URL: https://github.com/$SOURCE_REPO/releases/tag/$VERSION
ü§ñ Triggered: repository_dispatch webhook automation
‚úÖ Validation: Ruby syntax, version, and checksum verified

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
            else
              COMMIT_MSG="feat: update formula to $VERSION - manual update

Manual formula update via workflow dispatch

üì¶ Version Update: $VERSION
üîß Triggered: Manual workflow dispatch  
‚úÖ Validation: Ruby syntax, version, and checksum verified

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
            fi
            
            git commit -m "$COMMIT_MSG"
            echo "‚úÖ Formula changes committed"
          fi
          
          echo "::endgroup::"

      - name: üì§ Push Changes
        run: |
          echo "::group::Push Changes"
          
          if git diff --quiet HEAD~1 HEAD; then
            echo "‚ö†Ô∏è No changes to push"
          else
            echo "üì§ Pushing changes..."
            git push origin main
            echo "‚úÖ Changes pushed successfully"
          fi
          
          echo "::endgroup::"

      - name: üéâ Success Summary
        run: |
          echo "::group::Success Summary"
          echo "üéâ Formula update completed successfully!"
          echo ""
          echo "üì¶ **Update Details:**"
          echo "   ‚Ä¢ Version: ${{ steps.extract-info.outputs.version }}"
          echo "   ‚Ä¢ Source Repository: ${{ steps.extract-info.outputs.source-repo }}"
          echo "   ‚Ä¢ Trigger Type: ${{ steps.extract-info.outputs.trigger-type }}"
          echo ""
          echo "‚úÖ **Completed Steps:**"
          echo "   ‚Ä¢ Downloaded and validated release metadata"
          echo "   ‚Ä¢ Updated formula with verified version and checksum"
          echo "   ‚Ä¢ Validated formula syntax and content"
          echo "   ‚Ä¢ Committed and pushed changes to tap repository"
          echo ""
          echo "üç∫ **Formula Status:**"
          echo "   ‚Ä¢ Formula updated successfully"
          echo "   ‚Ä¢ Users can install: brew install beriberikix/usbipd-mac/usbipd-mac"
          echo "   ‚Ä¢ Users can upgrade: brew upgrade usbipd-mac"
          echo "::endgroup::"